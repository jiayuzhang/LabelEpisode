#!/usr/bin/env node
const cheerio = require('cheerio');
const fs = require('fs');
const minimist = require('minimist');
const process = require('process');
const randomstring = require("randomstring");
const rp = require('request-promise-native');
const slugify = require('slugify');
const _ = require('lodash');
var WooCommerceAPI = require('woocommerce-api');

process.chdir(__dirname);

// WooCommerce Auth issue with some hosting (e.g. GoDaddy)
// https://help.robotninja.com/en/articles/2015407-woocommerce-api-authentication-issues
var WooCommerce = new WooCommerceAPI({
  // url: 'http://wp.local',
  // consumerKey: 'ck_c4b2f6f3a316e7ce9935baebd15aec150b46d8c3',
  // consumerSecret: 'cs_4ad735eec5faf1a4d20d685a2bb7f87b36c3bb87',
  url: 'https://www.labelepisode.com/home',
  consumerKey: 'ck_c23f387bff044f634ae63a8b193c5f0fa195cc6c',
  consumerSecret: 'cs_1b6459782536ac3a3cda05970ffb13c6124a8f2d',
  wpAPI: true,
  version: 'wc/v3',
  // Force Basic Authentication as query string true and using under HTTPS
  // GoDaddy apache has issue to passing AUTH header...
  queryStringAuth: true,
  timeout: 1000000000
});

var COLOR = {
  '灰色': 'Grey',
  '藏青': 'Navy',
  '绛紫色': 'Purple',
  '橙红': 'Orange Red',
  '白色': 'White',
  '棕色': 'Brown',
  '黑色': 'Black',
  '绿色': 'Green',
  '黄色': 'Yellow',
  '红色': 'Red',
  '金色': 'Gold',
  '蓝色': 'Blue',
  '驼色': 'Camel',
  '墨绿': 'Dark Green',
  '黑': 'Black',
  '灰': 'Grey',
  '紫色': 'Purple',
  '粉色': 'Pink',
  '淡紫色': 'Purple',
  '银色': 'Silver',
  '白金': 'Platinum',
  '黄金': 'Gold',
  '红色 一对': 'Red (Pair)',
  '蓝色 一对': 'Blue (Pair)',
  '红蓝 一对': 'Blue and Red (Pair)',
  '单个黄色': 'Yellow (Single)',
  '单个橘色': 'Orange (Single)',
  '橘色单个': 'Orange (Single)',
  '黄色单个': 'Yellow (Single)',
  '蓝色单个': 'Blue (Single)',
  '红色单个': 'Red (Single)',
  '单个红色': 'Red (Single)',
  '单个蓝色': 'Blue (Single)',
  '深棕': 'Dark Brown',
  '浅棕': 'Light Brown',
  '黄色黑色': 'Yellow Black',
  '黑色白色': 'Black White',
  '红金': 'Red Gold',
  '深灰色': 'Grey',
  '水洗黑': 'Grey',
  '一个橘色': 'Orange (Single)',
  '单个 黄色': 'Yellow (Single)',
  '卡其': 'Khaki',
  '棕灰': 'Brown Grey',
  '黄金与黄金': 'Gold',
  '军绿': 'Army Green',
  '复古银': 'Silver',
  '藏蓝': 'Dark Blue',
  '金色 一对': 'Gold (Pair)',
  '橄榄灰': 'Olive Grey',
  '绿豆灰': 'Green Ash',
  '米白': 'White',
  '牛仔水洗蓝': 'Denim Blue',
  '短绿长蓝': 'Green (short) and Blue (long)',
  '短透长透': 'Transparent (short) and Transparent (long)',
  '短绿长透': 'Green (short) and Transparent (long)',
  '短蓝长透': 'Blue (short) and Transparent (long)',
  '短橘长透': 'Orange (short) and Transparent (long)',
  '短红长透': 'Red (short) and Transparent (long)',
  '短绿长红': 'Short (green) and Red (long)',
  '墨绿/黄色': 'Dark Green/Yellow',
  '深蓝/橙红': 'Dark Blue/Orange Red',
  '黑灰格子': 'Black and White',
  '印花': 'Floral Print',
  '花色': 'Colorful',
  '单个 复古红': 'Vintage Red (Single)',
  '单个 闪光红': 'Shine Red (Single)',
  '单个 雪碧': 'COLA (Single)',
  '单个 芬达': 'Fanta (Single)',
  '红钻链子': 'Red Diamond',
  '白金链子': 'Platinum',
  '白钻链子': 'White Diamond',
  '单个珊瑚粉': 'Coral Pink (Single)',
  '单个': 'Single',
  '一对': 'Pair',
  '单只': 'Single',
  '白金磨砂': 'Platinum Polish',
  '透白金': 'Platinum',
  '荧绿银': 'Fluorescent Green Silver',
  '荧红金': 'Fluorescent Red Gold',
  '冰银蓝': 'Ice Silver Blue',
  '黑色/白色': 'Black/White',
  '浅蓝/深蓝': 'Light Blue/Dark Blue',
  '粉色/红棕（预售6月1左右发货）': 'Pink/Red Brown',
  '黄色/墨绿（预售6月1左右发货）': 'Yellow/Dark Green',
  '酒红（预售6月1日左右发货）': 'Red',
  '裸色（预7月10日左右发货）': 'Nude',
  '灰白（预售7月10日左右发货）': 'Grey White',
  '黑色（预售6月1日左右发货）': 'Black',
  '粉色/墨绿': 'Pink/Drak Green',
  '墨绿/黄色（预售6月1日左右发货）': 'Dark Green/Yellow',
  '深蓝/橙红（预售6月1日左右发货）': 'Dark Blue/Orange Red',
  '白色/黑色（预售6月1日左右发货）': 'White/Black',
  '白色/黑色（预售6月1日左右发货）': 'White/Black',
  '墨绿/黄色': 'Dark Green/Yellow',
  '深蓝/橙红': 'Dark Blue/Orange Red'
};

async function getAllVariations() {
  const dedupe = {};

  const data = JSON.parse(fs.readFileSync('./product-ids-2019-09-07', 'utf8'));
  for (const d of data) {
    const id = d.ID;
    console.log(`Fetching WooCommerce product id=${id}`);
    const response = await WooCommerce.getAsync(`products/${id}`);
    const wooProduct = JSON.parse(response.body);
    if (wooProduct.attributes && wooProduct.attributes.length > 0) {
      for (const attr of wooProduct.attributes) {
        if (attr.name.toLowerCase() === 'color') {
          for (const opt of attr.options) {
            if (!dedupe[opt]) {
              console.log(opt);
              dedupe[opt] = 1;
            }
          }
        } else if (attr.name.toLowerCase === 'style') {
          console.log(`Style id=${id}`);
        }
      }
    }

    // console.log(JSON.stringify(wooProduct, null, 4));

    console.log('=======================================================');
  }
}

async function fixVariations() {
  // const data = JSON.parse(fs.readFileSync('./product-ids-2019-09-07', 'utf8'));
  const data = [
    {ID: 8610},
    {ID: 8141},
    {ID: 8308},
    {ID: 8694},
    {ID: 8705},
    {ID: 8716},
    {ID: 8726},
  ];
  for (const d of data) {
    const id = d.ID;
    console.log('=======================================================');
    console.log(`Fetching WooCommerce product id=${id}`);
    let response = await WooCommerce.getAsync(`products/${id}`);
    const wooProduct = JSON.parse(response.body);

    let colorAttr = getColorAttr(wooProduct.attributes);
    if (!colorAttr) {
      continue;
    }

    const tranlationMap = {};
    for (const opt of colorAttr.options) {
      if (!COLOR[opt]) {
        console.log(`Missing translation for some options: ${colorAttr.options}.`)
        break;
      }
      tranlationMap[opt] = COLOR[opt];
    }

    if (_.size(tranlationMap) != colorAttr.options.length) {
      continue;
    }

    // Mutates the attribute in-place
    colorAttr.options = _.values(tranlationMap);
    await WooCommerce.put(`products/${id}`, { attributes: wooProduct.attributes });

    // TODO, fix variation
    response = await WooCommerce.getAsync(`products/${id}/variations`);
    const wooVariations = JSON.parse(response.body);
    for (const variation of wooVariations) {
      colorAttr = getColorAttr(variation.attributes);
      colorAttr.option = tranlationMap[colorAttr.option];
      await WooCommerce.put(`products/${id}/variations/${variation.id}`, { attributes: variation.attributes });
    }
  }
}

function getColorAttr(attributes) {
  if (attributes && attributes.length > 0) {
    for (const attr of attributes) {
      if (attr.name.toLowerCase() === 'color') {
        return attr;
      }
    }
  }
  return null;
}

//=================================
// Main program
//=================================
const args = minimist(process.argv.slice(2));

const catchFn = (err) => {
  console.log('ERROR!', err);
  process.exit(0);
};

const cmd = args._[0];
switch (cmd) {
  case 'get':
    getAllVariations().catch(catchFn);
    break;

  case 'fix':
    fixVariations().catch(catchFn);
    break;

  default:
    console.error(`"${cmd}" is not a valid command!`);
}

